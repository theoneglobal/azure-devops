trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: $(AZURE_DEVOPS_ORG)-ci-vars  # References the variable group created in Terraform
  - name: terraform_version
    value: '1.5.0'
  - name: docker_repo
    value: '$(ACR_NAME).azurecr.io/myapp'

steps:
  - task: Bash@3
    displayName: 'Install Terraform'
    inputs:
      targetType: 'inline'
      script: |
        wget -O terraform.zip https://releases.hashicorp.com/terraform/$(terraform_version)/terraform_$(terraform_version)_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform --version

  - task: Bash@3
    displayName: 'Terraform Init'
    inputs:
      targetType: 'inline'
      script: |
        terraform init
    env:
      ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)  # Set if using Azure backend

  - task: Bash@3
    displayName: 'Terraform Validate'
    inputs:
      targetType: 'inline'
      script: |
        terraform validate

  - task: Bash@3
    displayName: 'Terraform Plan'
    inputs:
      targetType: 'inline'
      script: |
        terraform plan -out=tfplan
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)

  - task: Bash@3
    displayName: 'Clone Django Repository'
    inputs:
      targetType: 'inline'
      script: |
        git clone $(DJANGO_REPO_URL) django-app
        cd django-app
        git checkout main

  - task: Docker@2
    displayName: 'Build and Push Docker Image to ACR'
    inputs:
      command: 'buildAndPush'
      repository: '$(docker_repo)'
      Dockerfile: 'django-app/Dockerfile'
      containerRegistry: 'Azure DevOps ACR Service Connection'  # Service connection created by Terraform
      tags: |
        $(Build.BuildId)
        latest
